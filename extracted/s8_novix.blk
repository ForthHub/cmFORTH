\ S8_NC4000.BLK                                       88Nov26jaxNO WARRANTY EXPRESS OR IMPLIED on this fine piece of freeware!  Communicate with your Novix NC40xx, or with your Zilog Super8   single board computer from your Amiga!                                                                                          Required:                                                                 A4TH1.5 ( on GEnie Forth Interest Group Library)                Amiga 500/1000/2000                                             Super8 or Novix and cabling.                                                                                          Public Domain Software from Jack Woehr                           jax@well.UUCP * JAX on GEnie * SYSOP@RCFB 303-278-0364                                                                         Kudos to Peter J. Appelman ( P.APPELMAN on GEnie ) for the      public domain 32-bit Amiga Software System called A4TH!         NO WARRANTY EXPRESS OR IMPLIED on this fine piece of freeware   \ load screen ... type  ok  then type Novix or Super8 88Nov26jax\                                                               tload i:exec/io                                                 tload i:devices/serial                                          decimal 11 18 thru decimal 21 29 thru exit                                                                                      \ Now type Novix or Super8 ... case matters in A4TH!                                                                            \ N.B. you may have to alter the A4TH Include file exec/io.     \ The version that I received had DoIO and a couple of other    \ calls commented out (\\ is the comment char in A4TH includes) \ so just remove the comment characters so all the calls are    \ compiled when exec/io is compiled. Of course, you should have \ used the AmigaDOS ASSIGN command to ASSIGN i: to the dir      \ where you are keeping the include files.                                                                                      \ S8_NC4000.BLK                                       88Nov26jax                                                                Communicate with your Novix NC40xx, or with your Zilog Super8   single board computer from your Amiga!                                                                                          Required:                                                                 A4TH1.5 ( on GEnie Forth Interest Group Library)                Amiga 500/1000/2000                                             Super8 or Novix and cabling.                                                                                          Public Domain Software from Jack Woehr                           jax@well.UUCP * JAX on GEnie * SYSOP@RCFB 303-278-0364                                                                         Kudos to Peter J. Appelman ( P.APPELMAN on GEnie ) for the      public domain 32-bit Amiga Software System called A4TH!                                                                         \ S8_NC4000.BLK                                       88Nov26jax                                                                Communicate with your Novix NC40xx, or with your Zilog Super8   single board computer from your Amiga!                                                                                          Required:                                                                 A4TH1.5 ( on GEnie Forth Interest Group Library)                Amiga 500/1000/2000                                             Super8 or Novix and cabling.                                                                                          Public Domain Software from Jack Woehr                           jax@well.UUCP * JAX on GEnie * SYSOP@RCFB 303-278-0364                                                                         Kudos to Peter J. Appelman ( P.APPELMAN on GEnie ) for the      public domain 32-bit Amiga Software System called A4TH!                                                                         \ S8_NC4000.BLK                                       88Nov26jax                                                                Communicate with your Novix NC40xx, or with your Zilog Super8   single board computer from your Amiga!                                                                                          Required:                                                                 A4TH1.5 ( on GEnie Forth Interest Group Library)                Amiga 500/1000/2000                                             Super8 or Novix and cabling.                                                                                          Public Domain Software from Jack Woehr                           jax@well.UUCP * JAX on GEnie * SYSOP@RCFB 303-278-0364                                                                         Kudos to Peter J. Appelman ( P.APPELMAN on GEnie ) for the      public domain 32-bit Amiga Software System called A4TH!                                                                         \ S8_NC4000.BLK                                       88Nov26jax                                                                Communicate with your Novix NC40xx, or with your Zilog Super8   single board computer from your Amiga!                                                                                          Required:                                                                 A4TH1.5 ( on GEnie Forth Interest Group Library)                Amiga 500/1000/2000                                             Super8 or Novix and cabling.                                                                                          Public Domain Software from Jack Woehr                           jax@well.UUCP * JAX on GEnie * SYSOP@RCFB 303-278-0364                                                                         Kudos to Peter J. Appelman ( P.APPELMAN on GEnie ) for the      public domain 32-bit Amiga Software System called A4TH!                                                                         \ S8_NC4000.BLK                                       88Nov26jax                                                                Communicate with your Novix NC40xx, or with your Zilog Super8   single board computer from your Amiga!                                                                                          Required:                                                                 A4TH1.5 ( on GEnie Forth Interest Group Library)                Amiga 500/1000/2000                                             Super8 or Novix and cabling.                                                                                          Public Domain Software from Jack Woehr                           jax@well.UUCP * JAX on GEnie * SYSOP@RCFB 303-278-0364                                                                         Kudos to Peter J. Appelman ( P.APPELMAN on GEnie ) for the      public domain 32-bit Amiga Software System called A4TH!                                                                         \ S8_NC4000.BLK                                       88Nov26jax                                                                Communicate with your Novix NC40xx, or with your Zilog Super8   single board computer from your Amiga!                                                                                          Required:                                                                 A4TH1.5 ( on GEnie Forth Interest Group Library)                Amiga 500/1000/2000                                             Super8 or Novix and cabling.                                                                                          Public Domain Software from Jack Woehr                           jax@well.UUCP * JAX on GEnie * SYSOP@RCFB 303-278-0364                                                                         Kudos to Peter J. Appelman ( P.APPELMAN on GEnie ) for the      public domain 32-bit Amiga Software System called A4TH!                                                                         \ S8_NC4000.BLK                                       88Nov26jax                                                                Communicate with your Novix NC40xx, or with your Zilog Super8   single board computer from your Amiga!                                                                                          Required:                                                                 A4TH1.5 ( on GEnie Forth Interest Group Library)                Amiga 500/1000/2000                                             Super8 or Novix and cabling.                                                                                          Public Domain Software from Jack Woehr                           jax@well.UUCP * JAX on GEnie * SYSOP@RCFB 303-278-0364                                                                         Kudos to Peter J. Appelman ( P.APPELMAN on GEnie ) for the      public domain 32-bit Amiga Software System called A4TH!                                                                         \ S8_NC4000.BLK                                       88Nov26jax                                                                Communicate with your Novix NC40xx, or with your Zilog Super8   single board computer from your Amiga!                                                                                          Required:                                                                 A4TH1.5 ( on GEnie Forth Interest Group Library)                Amiga 500/1000/2000                                             Super8 or Novix and cabling.                                                                                          Public Domain Software from Jack Woehr                           jax@well.UUCP * JAX on GEnie * SYSOP@RCFB 303-278-0364                                                                         Kudos to Peter J. Appelman ( P.APPELMAN on GEnie ) for the      public domain 32-bit Amiga Software System called A4TH!                                                                         \ serial.blk ... access serial.device from A4TH       88Nov26jax\ my-readp' my-readreq' get-r'p' get-r'r' inbuff      88Nov22jax\ my-writep' my-writer' get-w'p' get-writer' outbuff  88Nov22jax\ init.my_request                                     88Nov24jax\ get-port clone-port                                 88Nov22jax\ cleanup-serial, cleanup-(#?)                        88Nov22jax\ serial-setup which-board novix super8               88Nov24jax\ start-read-async                                    88Nov24jax\ start-read-char end-recv-char                       88Nov23jax\ S8_NC4000.BLK                                       88Nov26jax                                                                                                                                                                                                                                                                                                                                Jack Woehr {jax@well.UUCP well!jax@lll-winken.arpa JAX on GENie}\ my-readp' my-readreq' get-r'p' get-r'r' inbuff      88Nov22jaxhex only forth also definitions                                                                                                 variable my-readport                                            variable my-readrequest                                                                                                         : get-readport ( ---)                                              " my_readport" drop 0 [ Exec ] CreatePort my-readport ! ;                                                                    : get-readrequest ( ---)                                           my-readport @ sizeoff IOExtSer [ Exec ] CreateExtIO             my-readrequest ! ;                                                                                                           create inbuff 20 allot                                                                                                          decimal                                                         \ my-writep' my-writer' get-w'p' get-writer' outbuff  88Nov22jaxhex only forth also definitions                                                                                                 variable my-writeport                                           variable my-writerequest                                                                                                        : get-writeport ( ---)                                             " my_writeport" drop 0 [ Exec ] CreatePort my-writeport ! ;                                                                  : get-writerequest ( ---)                                          my-writeport @ sizeoff IOExtSer [ Exec ] CreateExtIO            my-writerequest ! ;                                                                                                          create outbuff 20 allot                                                                                                         decimal                                                         \ init.my_request                                     88Nov28jaxdecimal only forth definitions also Exec also                                                                                   : init.my_request ( X-Flag request --- error)                      4096 over { IOExtSer io_RBufLen s!                              9600 over { IOExtSer io_Baud s!                                    8 over { IOExtSer io_ReadLen s!                                 8 over { IOExtSer io_WriteLen s!                                1 over { IOExtSer io_StopBits s!                             ( SERF_XDISABLED) tuck { IOExtSer io_SerFlags s!                  SDCMD_SETPARAMS over { IOExtSer IOSer                                                { IOStdReq io_Command s!                 DoIO ;                                                                                                                       decimal                                                                                                                         \ get-port clone-port                                 88Nov22jaxhex only forth also definitions                                                                                                 : get-port ( --- error|0)                                          my-readrequest @ SERIALNAME SERF_XDISABLED 0                    [ Exec ] OpenDevice ;                                                                                                        : clone-port ( ---)                                                my-readrequest @ my-writerequest @                               [ Exec sizeoff IOExtSer ] literal move ;                                                                                    decimal                                                                                                                                                                                                                                                                                                                         \ cleanup-serial, cleanup-(#?)                        88Nov22jaxhex only forth definitions also Exec also                       : cleanup-readport ( ---) my-readport @ DeletePort ;            : cleanup-readreq ( ---) my-readrequest @ DeleteExtIO ;         : cleanup-read ( ---) cleanup-readreq cleanup-readport ;        : cleanup-writeport ( ---) my-writeport @ DeletePort ;          : cleanup-writereq ( ---) my-writerequest @ DeleteExtIO ;       : cleanup-write ( ---) cleanup-writereq cleanup-writeport ;     : cleanup-r/w ( ---) cleanup-read cleanup-write ;               : close-serial ( ---) my-readrequest @ CloseDevice ;                                                                            : cleanup-serial ( ---)                                            close-serial cleanup-readreq cleanup-readport                   cleanup-writereq cleanup-writeport ;                                                                                         decimal                                                         \ serial-setup which-board novix super8               88Nov24jaxhex only forth also definitions                                 SERF_XDISABLED constant novix 0 constant super8                 variable which-board which-board off                                                                                            : serial-setup ( --- DoIO-error)                                   get-readport my-readport @ 0= abort" No Readport! "             get-readrequest my-readrequest @ 0=                             if cleanup-readport true abort" No ReadRequest! " then          get-writeport my-writeport @ 0=                                 if cleanup-read true abort" No WritePort! " then                get-writerequest my-writerequest @ 0=                           if cleanup-read cleanup-writeport true abort" No WReq" then     get-port if cleanup-r/w true abort" No SerDev! " then           which-board @ my-readrequest @ init.my_request clone-port ;  decimal                                                         \ start-read-async                                    88Nov24jaxhex only forth definitions also Exec also                       : (start-read) ( addr #chars req --- req)                          tuck { IOExtSer IOSer { IOStdReq io_Length s!                   tuck { IOExtSer IOSer { IOStdReq io_Data s!                     CMD_READ over { IOExtSer IOSer { IOStdReq io_Command s! ;    : start-read-async ( addr #chars req ---)                          (start-read) SendIO ;                                        : start-read-sync ( addr #chars req --- error|f)                   (start-read) DoIO ;                                                                                                          : catch-read-async ( req ---   t=no|f=yes)                         CheckIO dup if WaitIO else 0= then ;                         : check-read ( req --- t|f)                                        CheckIO dup if dup WaitIO drop then ;                        decimal                                                         \ start-read-char end-recv-char                       88Nov23jaxhex only forth definitions also Exec also                       : start-recv-char ( ---)                                           inbuff 1 my-readrequest @ start-read-async ;                                                                                 : end-recv-char ( ---)                                             my-readrequest @ catch-read-async                               0= if inbuff c@ emit then ;                                                                                                  : test-read ( ---)                                                 start-recv-char                                                 begin                                                           my-readrequest @ catch-read-async                               0= if inbuff c@ emit start-recv-char then                       key? until begin my-readrequest @ WaitIO 0= until ;          decimal                                                         \ S8_NC4000.BLK                                       88Nov26jax                                                                Communicate with your Novix NC40xx, or with your Zilog Super8   single board computer from your Amiga!                                                                                          Required:                                                                 A4TH1.5 ( on GEnie Forth Interest Group Library)                Amiga 500/1000/2000                                             Super8 or Novix and cabling.                                                                                          Public Domain Software from Jack Woehr                           jax@well.UUCP * JAX on GEnie * SYSOP@RCFB 303-278-0364                                                                         Kudos to Peter J. Appelman ( P.APPELMAN on GEnie ) for the      public domain 32-bit Amiga Software System called A4TH!                                                                         \ S8-NC400.BLK                                        88Nov26jax\ start-write-async start-write-sync check-write      88Nov23jax\ send-char send-chars send-chars! recv-chars,!       88Nov24jax\ test-term                                           88Nov24jax\ long>nibs nibs>long nibs>word ascii-mask,-unmask    88Nov24jax\ send-long-nibs read-long-nibs s8-block-request      88Nov24jax\ send-s8-block recv-s8-block s8-block                88Nov24jax\ Novix BLOCK words ... serve-block                   88Nov24jax\ run-terminal                                        88Nov24jax\ Terminal Novix Super8                               88Nov24jax                                                                                                                                                                                                                                                                                                                                Jack Woehr {jax@well.UUCP well!jax@lll-winken.arpa JAX on GENie}\ start-write-async start-write-sync check-write      88Nov23jaxhex only forth definitions also Exec also                       : (start-write) ( addr #chars req --- req)                         tuck { IOExtSer IOSer { IOStdReq io_Length s!                   tuck { IOExtSer IOSer { IOStdReq io_Data s!                     CMD_WRITE over { IOExtSer IOSer { IOStdReq io_Command s! ;                                                                   : start-write-sync ( addr #chars req --- error|f)                  (start-write) DoIO ;                                                                                                         : start-write-async ( addr #chars req ---)                         (start-write) SendIO ;                                                                                                       : check-write ( req --- t|f)                                       CheckIO dup if dup WaitIO drop then ;                        decimal                                                         \ send-char send-chars send-chars! recv-chars,!       88Nov25jaxhex only forth definitions also Exec also                       : send-char ( --- error|f)                                         outbuff 1 my-writerequest @ start-write-sync ;                                                                               : send-chars ( count ---)                                          outbuff swap my-writerequest @ start-write-async ;                                                                           : send-chars! ( count --- error|f)                                 outbuff swap my-writerequest @ start-write-sync ;                                                                            : recv-chars ( count ---)                                          inbuff swap my-readrequest @ start-read-async ;              : recv-chars! ( count --- error|f)                                 inbuff swap my-readrequest @ start-read-sync ;               decimal                                                         \ long>nibs n'>long n'>word ascii-mask,-unm' w>nibs   88Nov26jaxhex                                                             30 constant ascii-mask ffffffff 30 xor constant ascii-unmask                                                                    : long>nibs ( 32b --- 4bMaskllll ... 4bMaskhhhh)                   8 0 do 10 /mod swap ascii-mask or swap loop drop ;           : nibs>long ( 4bMaskllll ... 4bMaskhhhh --- 32b)                   ascii-unmask and                                                7 0 do 10 * swap ascii-unmask and + loop ;                   : nibs>word ( 4bMaskll ... 4bMaskhh --- 16b)                       ascii-unmask and                                                3 0 do 10 * swap ascii-unmask and + loop ;                   : word>nibs ( 16b --- 4bMaskll ... 4bMaskhh)                       4 0 do 10 /mod swap ascii-mask or swap loop drop ;                                                                           decimal                                                         \ nibs>s8buff s8buff>nibs block-prefix                88Nov26jaxhex                                                             create s8buff b/buf 2 * allot                                   : nibs>s8buff ( n1..n8 index ---)                                  8 * s8buff +                                                    4 0 do -rot 2  pick i 2* + tuck c! 1+ c! loop drop ;                                                                         : s8buff>nibs ( index --- n1..n8)                                  8 * s8buff +                                                    0 7 do dup i + c@ swap -1 +loop drop ;                                                                                       : block-prefix ( block# ---)                                       0 outbuff c! send-char abort" Couldn't Signal Xfer"             word>nibs 4 0 do i outbuff + c! loop 4 send-chars!              abort" Couldn't Send Block Number"  ;                        decimal                                                         \ fill-s8buff empty-s8buff s8-block-request           88Nov26jaxhex                                                             : fill-s8buff ( block# ---)                                        block [ b/buf 4 / ] literal 0                                   do dup i 4 * + @ long>nibs i nibs>s8buff loop drop ;                                                                         : empty-s8buff ( block# ---)                                       block update [ b/buf 4 / ] literal 0                            do i s8buff>nibs nibs>long over i 4 * + ! loop drop flush ;                                                                  : s8-block-request ( --- blocknum+mask? T=>host|F=>targ)           4 recv-chars! abort" RECV-CHARS Error in S8-BLOCK-REQUEST"      0 3 do i inbuff + c@ -1 +loop nibs>word                         dup 8000 and ;                                                                                                               decimal                                                         \ send-s8-block recv-s8-block s8-block                88Nov26jaxhex                                                                                                                             : send-s8-block ( blocknum ---)                                    dup block-prefix fill-s8buff s8buff [ b/buf 2* ] literal        my-writerequest @ start-write-sync abort" Amiga>S8 err" ;                                                                    : recv-s8-block ( blocknum ---)                                    s8buff [ b/buf 2* ] literal my-writerequest @                   start-read-sync abort" Targ>Host Error" empty-s8buff ;                                                                       : s8-block ( ---)                                                  s8-block-request                                                if 7fff and recv-s8-block else send-s8-block then ;                                                                          decimal                                                         \ Novix BLOCK words ... serve-block                   88Nov25jaxhex only forth definitions also                                 : send-novix-block ( blocknum ---) block b/buf my-writerequest     @ start-write-sync abort" Send-Novix Error" ;                : recv-novix-block ( blocknum ---) block update b/buf              my-readrequest @ start-read-sync abort" Recv-Novix Error" ;  : novix-block-request ( blocknum+Mask? T=>Host|F=>Targ)            2 recv-chars! abort" nov-br recv-error"                         inbuff dup c@ 100 *                                             swap 1+ c@ + dup 8000 and ;                                  : novix-block ( ---)                                               novix-block-request if 7fff and recv-novix-block flush          else send-novix-block then ;                                 : serve-block ( ---)                                               which-board @ if novix-block else s8-block then ;            decimal                                                         \ run-terminal                                        88Nov25jaxhex only forth definitions also Exec also                       : run-terminal ( ---) start-recv-char                              begin                                                            my-readrequest @ catch-read-async 0=                            if inbuff c@ dup                                                 if emit else drop serve-block then start-recv-char then        key?                                                            if key dup 1b <>                                                 if outbuff c! send-char dup if ." Write err" then then         else false                                                      then                                                           until                                                           my-readrequest @ CheckIO dup                                    if WaitIO else drop my-readrequest @ AbortIO then drop ;     decimal                                                         \ Terminal Novix Super8                               88Nov26jaxhex                                                                                                                             : Terminal ( board# ---)                                           which-board ! serial-setup abort" Serial Setup DoIO Err"        run-terminal cleanup-serial ;                                                                                                : Novix ( ---) novix Terminal ;                                                                                                 : Super8 ( ---) super8 Terminal ;                                                                                               \ Read comments on shadow screen to avoid problems!                                                                             decimal                                                                                                                                                                                         \ S8_NC4000.BLK                                       88Nov26jax                                                                Communicate with your Novix NC40xx, or with your Zilog Super8   single board computer from your Amiga!                                                                                          Required:                                                                 A4TH1.5 ( on GEnie Forth Interest Group Library)                Amiga 500/1000/2000                                             Super8 or Novix and cabling.                                                                                          Public Domain Software from Jack Woehr                           jax@well.UUCP * JAX on GEnie * SYSOP@RCFB 303-278-0364                                                                         Kudos to Peter J. Appelman ( P.APPELMAN on GEnie ) for the      public domain 32-bit Amiga Software System called A4TH!                                                                         \ load screen ... type  ok  then type Novix or Super8 88Nov26jax\                                                               tload i:exec/io                                                 tload i:devices/serial                                          decimal 11 18 thru decimal 21 29 thru exit                                                                                      \ Now type Novix or Super8 ... case matters in A4TH!                                                                            \ N.B. you may have to alter the A4TH Include file exec/io.     \ The version that I received had DoIO and a couple of other    \ calls commented out (\\ is the comment char in A4TH includes) \ so just remove the comment characters so all the calls are    \ compiled when exec/io is compiled. Of course, you should have \ used the AmigaDOS ASSIGN command to ASSIGN i: to the dir      \ where you are keeping the include files.                                                                                      \ S8_NC4000.BLK                                       88Nov26jax                                                                Communicate with your Novix NC40xx, or with your Zilog Super8   single board computer from your Amiga!                                                                                          Required:                                                                 A4TH1.5 ( on GEnie Forth Interest Group Library)                Amiga 500/1000/2000                                             Super8 or Novix and cabling.                                                                                          Public Domain Software from Jack Woehr                           jax@well.UUCP * JAX on GEnie * SYSOP@RCFB 303-278-0364                                                                         Kudos to Peter J. Appelman ( P.APPELMAN on GEnie ) for the      public domain 32-bit Amiga Software System called A4TH!                                                                         \ S8_NC4000.BLK                                       88Nov26jax                                                                Communicate with your Novix NC40xx, or with your Zilog Super8   single board computer from your Amiga!                                                                                          Required:                                                                 A4TH1.5 ( on GEnie Forth Interest Group Library)                Amiga 500/1000/2000                                             Super8 or Novix and cabling.                                                                                          Public Domain Software from Jack Woehr                           jax@well.UUCP * JAX on GEnie * SYSOP@RCFB 303-278-0364                                                                         Kudos to Peter J. Appelman ( P.APPELMAN on GEnie ) for the      public domain 32-bit Amiga Software System called A4TH!                                                                         \ S8_NC4000.BLK                                       88Nov26jax                                                                Communicate with your Novix NC40xx, or with your Zilog Super8   single board computer from your Amiga!                                                                                          Required:                                                                 A4TH1.5 ( on GEnie Forth Interest Group Library)                Amiga 500/1000/2000                                             Super8 or Novix and cabling.                                                                                          Public Domain Software from Jack Woehr                           jax@well.UUCP * JAX on GEnie * SYSOP@RCFB 303-278-0364                                                                         Kudos to Peter J. Appelman ( P.APPELMAN on GEnie ) for the      public domain 32-bit Amiga Software System called A4TH!                                                                         \ S8_NC4000.BLK                                       88Nov26jax                                                                Communicate with your Novix NC40xx, or with your Zilog Super8   single board computer from your Amiga!                                                                                          Required:                                                                 A4TH1.5 ( on GEnie Forth Interest Group Library)                Amiga 500/1000/2000                                             Super8 or Novix and cabling.                                                                                          Public Domain Software from Jack Woehr                           jax@well.UUCP * JAX on GEnie * SYSOP@RCFB 303-278-0364                                                                         Kudos to Peter J. Appelman ( P.APPELMAN on GEnie ) for the      public domain 32-bit Amiga Software System called A4TH!                                                                         \ S8_NC4000.BLK                                       88Nov26jax                                                                Communicate with your Novix NC40xx, or with your Zilog Super8   single board computer from your Amiga!                                                                                          Required:                                                                 A4TH1.5 ( on GEnie Forth Interest Group Library)                Amiga 500/1000/2000                                             Super8 or Novix and cabling.                                                                                          Public Domain Software from Jack Woehr                           jax@well.UUCP * JAX on GEnie * SYSOP@RCFB 303-278-0364                                                                         Kudos to Peter J. Appelman ( P.APPELMAN on GEnie ) for the      public domain 32-bit Amiga Software System called A4TH!                                                                         \ S8_NC4000.BLK                                       88Nov26jax                                                                Communicate with your Novix NC40xx, or with your Zilog Super8   single board computer from your Amiga!                                                                                          Required:                                                                 A4TH1.5 ( on GEnie Forth Interest Group Library)                Amiga 500/1000/2000                                             Super8 or Novix and cabling.                                                                                          Public Domain Software from Jack Woehr                           jax@well.UUCP * JAX on GEnie * SYSOP@RCFB 303-278-0364                                                                         Kudos to Peter J. Appelman ( P.APPELMAN on GEnie ) for the      public domain 32-bit Amiga Software System called A4TH!                                                                         \ S8_NC4000.BLK                                       88Nov26jax                                                                Communicate with your Novix NC40xx, or with your Zilog Super8   single board computer from your Amiga!                                                                                          Required:                                                                 A4TH1.5 ( on GEnie Forth Interest Group Library)                Amiga 500/1000/2000                                             Super8 or Novix and cabling.                                                                                          Public Domain Software from Jack Woehr                           jax@well.UUCP * JAX on GEnie * SYSOP@RCFB 303-278-0364                                                                         Kudos to Peter J. Appelman ( P.APPELMAN on GEnie ) for the      public domain 32-bit Amiga Software System called A4TH!                                                                         \ S8_NC4000.BLK                                       88Nov26jax                                                                Communicate with your Novix NC40xx, or with your Zilog Super8   single board computer from your Amiga!                                                                                          Required:                                                                 A4TH1.5 ( on GEnie Forth Interest Group Library)                Amiga 500/1000/2000                                             Super8 or Novix and cabling.                                                                                          Public Domain Software from Jack Woehr                           jax@well.UUCP * JAX on GEnie * SYSOP@RCFB 303-278-0364                                                                         Kudos to Peter J. Appelman ( P.APPELMAN on GEnie ) for the      public domain 32-bit Amiga Software System called A4TH!                                                                         \ serial.blk ... access serial.device from A4TH       88Nov22jax\ my-readp' my-readreq' get-r'p' get-r'r' inbuff      88Nov22jax\ my-writep' my-writer' get-w'p' get-writer' outbuff  88Nov22jax\ init.my_request                                     88Nov24jax\ get-port clone-port                                 88Nov22jax\ cleanup-serial, cleanup-(#?)                        88Nov22jax\ serial-setup which-board novix super8               88Nov24jax\ start-read-async                                    88Nov24jax\ start-read-char end-recv-char                       88Nov23jax\                                                     88Nov22jax                                                                                    Vesta Technology, Inc.                                       7100 W. 44th Ave, Suite #101                                       Wheat Ridge, CO 80033                                             (303) 422-8088                                                                                            \S                                                    88Nov23jax                                                                                                                                \ RKM Libs&Devs pcharacter buffer                                                                                                                                                                              \S                                                    88Nov23jax                                                                                                                                \ RKM Libs&Devs pchar buffer                                                                                                                                                                                   \S                                                    88Nov23jax                                                                                                                                \ RKM Libs&Devs ppov23jax                                                                                                                                \ RKM Libs&Devs pp 384-400; A4TH I:DEVICES/SERIAL                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \S                                                    88Nov23jax                                                                                                                                \ RKM Libs&Devs pp 384-400; A4TH I:DEVICES/SERIAL                 A4TH I:EXEC/IO                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \S                                                    88Nov23jax                                                                                                                                \ RKM Libs&Devs pp 384-400; A4TH I:DEVICES/SERIAL                 A4TH I:EXEC/IO                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \S                                                    88Nov23jax                                                                                                                                \ read a set of chars to an address                                                                                                                                                                                                                                                                                                                                                             \ see if the read ( or write, for that matter) is completed       and use WaitIO to reply the messageport                                                                                       \ better form of above, used later in the words that will         be important to the syscon emulator                                                                                                                                                           \S                                                    88Nov23jax                                                                \ send a request for one char                                                                                                                                                                   \ attempt to complete the read request for one char               if successful, emit char                                                                                                                                                                      \ a test loop whose exit presumes we can finish reading           the last request that was started                                                                                                                                                                                                                                                                                                                                                             \S                                                    88Nov23jax                                                                Use serial.device fromesta Technology, Inc.                                       7100 W. 44th Ave, Suite #101                                       Wheat Ridge, CO 80033                                             (303) 422-8088                                                                                            \                                                     88Nov22jax\ start-write-async start-write-sync check-write      88Nov23jax\ send-char send-chars send-chars! recv-chars,!       88Nov24jax\ test-term                                           88Nov24jax\ long>nibs nibs>long nibs>word ascii-mask,-unmask    88Nov24jax\ send-long-nibs read-long-nibs s8-block-request      88Nov24jax\ send-s8-block recv-s8-block s8-block                88Nov24jax\ Novix BLOCK words ... serve-block                   88Nov24jax\ run-terminal                                        88Nov24jax\ Terminal Novix Super8                               88Nov24jax                                                                                    Vesta Technology, Inc.                                       7100 W. 44th Ave, Suite #101                                       Wheat Ridge, CO 80033                                             (303) 422-8088                                                                                            \S                                                    88Nov23jax                                                                \ Words on this screen are analogous to the read-words            in the previous chapter. Added is an sync-write for             sending a character at a timeov25jax                                                                \ send a single char synchronously                                                                                                                                                                                                                              \ send a string asynchronously                                                                                                  \ send a string synchronously                                                                                                                                                                   \ receive a string asynchronously                                                                                               \ receive a string synchronously                                                                                                                                                                \S                                                    88Nov26jax                                                                \ Super8 communicates BLOCKs with host in 2048 nibbles            masked HEX 30 OR                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \S                                                    88Nov26jax                                                                \ hold the 2048 masked nibs both directions                     \ we're going to shift things around a 32-bit longword each time                                                                                                                                                                                                                                                                                                                                                                                                                                                                \ S8Forth is nutty ... targ sends a block, it just sends it.      Host sends a requested block, it has to echo the NUL and        the four-nib HEX 30 ORed block number as part of the send.                                                                                                                                    \S                                                    88Nov26jax                                                                \ shift 'em in                                                                                                                                                                                                                                                  \ move 'em out                                                                                                                                                                                                                                                  \ having recognized a NUL from the target, we grab the            next four nibs, unmask & merge for a BLOCK num ... hi bit       set means here it comes, hi bit reset means send it to targ.    Novix uses same sense of the hi bit, but sends bytes, not       nibs. This is why we don't use XON/XOFF for Novix.                                                                            \S                                                    88Nov26jax                                                                                                                                \ send the requested BLOCK                                                                                                                                                                                                                                      \ receive the coming BLOCK                                                                                                                                                                                                                                      \ get the BLOCK number, decide if it's a send or receive and      do it.                                                                                                                                                                                                                                                        \S                                                    88Nov26jax                                                                \ Novix is simpler ... sends a NUL then two bytes signifying      the transfer. Same sense of the hi bit ( 1= >Host 0= >Targ)     as the Super8. Then we just send the bytes raw down the wireov26jax                                                                \ loop around getting chars and sending 'em, doing BLOCK          transfers when requested                                                                                                      \ The author apologizes for the formatting of this screenov26jax\ Take yer pick ... Novix or Super8. <ESC> key exits.           \ AUTHOR OFFERS NO WARRANTY EXPRESS OR IMPLIED etc. etc. etc    \ *sheesh* the things you have to tell people these days ...    \ This is case sensitive, novix is a constant Novix is a        \ comm program. These words enable the chips to write to        \ your open disk file, so watch you don't overwrite something!  \ also, if you crash out of the Host/DiskServer loop, close     \ the serial.device by hand! type   cleanup-serial  to close    \ it manually. But NOTE: exiting via <ESC> *does* close the     \ serial.device ... IF YOU CLOSE IT TWICE IT WILL CRASH THE     \ AMIGA. I recommend *against* opening it by hand via the       \ word  serial-setup  since it is easy to accidentally open     \ it a second time without closing it first, which loses the    \ pointers to close the serial.device without actually giving   \ you the serial.device since the second open will *fail*.      