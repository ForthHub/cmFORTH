oad Screen )                                                 EMPTY DECIMAL                                                                                                                   6 13 THRU   ( Decompiler )                                                                                                      14 LOAD     ( DUMP )                                            15 LOAD     ( CASE )                                            16 LOAD     ( DEFER )                                           17 35 THRU  ( SEE )                                                                                                             HEX 2000 H !  ( Skip over EPROM )   DECIMAL                                                                                     36 42 THRU  ( DEBUG )                                                                                                           REMEMBER DEBUGGER                                                                                                               ( FORTHkit  1986 February)                                      ( Optimizing compiler)  3 LOAD  4 LOAD  5 LOAD                  : 0<   [COMPILE] 0<  [COMPILE] NOP ;                                                                                            FORTH : REMEMBER   CREATE  CONTEXT 2 - 2@ , ,                      DOES  R> 32767 AND  DUP 2 + H !  2@ CONTEXT 2 - 2!  FORTH ;  : THRU ( n nptimizing compiler)   OCTAL                                  : FORTH   1 CONTEXT ! ;                                         : COMPILER   2 CONTEXT ! ;                                      : uCODE ( n)   CREATE ,  DOES   R> 77777 AND  @ ,C ;                                                                            COMPILER : [COMPILE]   2 -' IF  DROP ABORT" ?"  THEN ,A ;       : !-   172700 SHORT ;                                           100000 uCODE NOP         140000 uCODE TWO                       100020 uCODE SWAP-DROP   140721 uCODE R>DROP                    160000 uCODE @DROP       154600 uCODE 0+c                       177300 uCODE N!          147303 uCODE -1                                                                                        FORTH : DUP?   HERE 2 - @  100120 = IF                                HERE 1 - @  7100 XOR  -2 ALLOT  ,C  THEN ;                COMPILER : I!   157200 SHORT  DUP? ;                                     : >R   157201 ,C  DUP? ;                                  ( Defining words)   OCTAL                                    FORTH : PACK ( a n - a)   160257 AND  140201 XOR IF                   40 SWAP +!  ELSE DROP  100040 ,  THEN  R>DROP ;           COMPILER : EXIT   ?CODE @  DUP IF  0 ?CODE !  DUP @  DUP 0< IF           DUP 170000 AND  100000 = IF  PACK THEN                          DUP 170300 AND  140300 = IF  PACK THEN                          DUP 170000 AND  150000 = IF                                        DUP 170600 AND  150000 XOR IF  PACK THEN  THEN DROP       ELSE  DUP HERE dA @ - XOR  170000 AND 0= IF                        7777 AND  130000 XOR  SWAP !  EXIT THEN DROP  THEN        THEN DROP  100040 , ;                                        : ;   [COMPILE] RECURSIVE  R>DROP  [COMPILE] EXIT ;                                                                             FORTH : CONSTANT ( n)   CREATE  -1 ALLOT                           [COMPILE] LITERAL  [COMPILE] EXIT ;                                                                                             ( Binary operators)   OCTAL                                  : BINARY ( n n)   CREATE , ,  DOES   R> 77777 AND  2@              ?CODE @ DUP IF  @  DUP 117100 AND  107100 =                        OVER 177700 AND  157500 = OR IF ( y -!)                            DUP 107020 - IF  SWAP-DROP XOR  DUP 700 AND  200 = IF              500 XOR  ELSE DUP 70000 AND 0= IF  20 XOR  THEN THEN            ?CODE @ !  EXIT THEN                                   THEN THEN DROP  ,C  DROP ;                                   : SHIFT ( n)   CREATE ,  DOES   R> 77777 AND  @                    ?CODE @ DUP IF  @  DUP 171003 AND  100000 = IF                     XOR  ?CODE @ !  EXIT THEN  THEN DROP  100000 XOR ,C ;     COMPILER                                                        4100 103020 BINARY OR      2100 105020 BINARY XOR               6100 101020 BINARY AND     3100 104020 BINARY +                 5100 106020 BINARY -       1100 102020 BINARY SWAP-             2 SHIFT 2*            1 SHIFT 2/           3 SHIFT 0<           ( Debugging Wordstility Words )  BASE @ HEX                                   : ID.   ( NFA-address -- )                                              2*  1 4 I!  ( set display flag )                                DUP C@ 01F AND  DUP                                             IF  1 -  FOR  1 + ( next addr )  DUP C@ ( next char )                         DUP  4 I@ IF 7F AND ELSE 2DROP 0 5F THEN                        EMIT 80 AND ( test msb ) IF 0 4 I! THEN                    NEXT                                                   ELSE  DROP THEN  DROP SPACE ;                                                                                           : WORDS    ( -- )                                                          CR  CONTEXT @ HASH @                                            BEGIN  DUP 1 + ID.  @ DUP 0= UNTIL  DROP ;                                                                           BASE !                                                                                                                          ( Utility Words )  BASE @ HEX                                   COMPILER  : \   ( -- )  >IN @  -40 AND 40 + >IN ! ;             FORTH     : \   [COMPILE] \ ;                                                                                                                                                                                                                                   : ?TERM  ( -- f )  0C I@  10 AND 10 XOR ;                                                                                                                                                                                                                                                                                                                                                       : NIP  SWAP-DROP ;                                                                                                              BASE !                                                                                                                          ( LITERAL Input Defining Words )                                BASE @ HEX                                                      : BASE'     ( radix -- )                                                    CREATE  ,  DOES R> 7FFF AND @  BASE @ >R  BASE !                4020 WORD  NUMBER  R> BASE ! ;                                                                                      2 BASE' B'  8 BASE' O'  0A BASE' D'  10 BASE' H'                                                                                : ASCII     4020 WORD  @ 0FF AND ;                              COMPILER    : ASCII  ASCII [COMPILE] LITERAL ;                                                                                  FORTH                                                                                                                           BASE !                                                                                                                                                                                          ( Decompiler ) BASE @ HEX  3 WIDTH !                            : NFA>PFA   ( nfa -- pfa )                                                  BEGIN  1 @+  SWAP 80 AND  UNTIL ;                   : LFA>NFA   ( lfa -- nfa )  1 + ;                               : NFA>LFA   ( nfa -- lfa )  1 - ;                               : LFA>PFA   ( lfa -- pfa )                                                  LFA>NFA  DUP NFA>PFA  SWAP @  8000 AND IF @ THEN ;                                                                  : SEARCH    ( adr lfa -- nfa t | f )                                        SWAP 4 I!  ( save match address )                               BEGIN   @ DUP                                                   WHILE   DUP LFA>PFA  4 I@ =                                     UNTIL   LFA>NFA -1 EXIT                                         THEN    DROP  0 ;                                   BASE !                                                                                                                          ( Decompiler )                                                  BASE @ HEX                                                      : PFA>NFA   ( pfa -- nfa | 0 )                                              DUP  2 HASH  SEARCH                                             IF NIP EXIT THEN                                                1 HASH  SEARCH                                                  IF EXIT THEN                                                    0  ;                                                                                                                : GET.NEXT  ( next-adr -- next-adr' instruction )                           1 @+ SWAP ;                                                                                                                                                                                                                                         BASE !                                                                                                                          ( Decompiler )  BASE @ HEX                                                                                                                                                                                                                                                                                                      : HEAD.     ( pfa -- )                                                      DUP  PFA>NFA  ?DUP IF ID. DROP EXIT THEN                        ." No Header -> " H. ;                              : GET.ADR   ( next-addr instruction -- next-addr address )                  0FFF AND            ( lower 12 bits )                           OVER  0F000 AND     ( next-addr page address )                  OR                  ( absolute address )                        dA @ + ;            ( relocate it )                                                                                 BASE !                                                                                                                          ( Link Search Utility )  BASE @ HEX                             : LINK      ( addr thread -- addr | 0 )                                     SWAP 4 I!                                                       BEGIN   @ DUP                                                   WHILE   DUP 4 I@ =                                              UNTIL   THEN ;                                                                                                      : ?LINK     ( addr -- flag )                                                DUP  1 HASH LINK                                                IF DROP -1 EXIT THEN                                            2 HASH LINK                                                     IF -1 EXIT THEN                                                 0 ;                                                                                                                 BASE !                                                                                                                          \ DUMP                                                23Jun87AM : DLN  ( addr -- addr' )                                            7 FOR  1 @+ SWAP  H.  NEXT  ;                               : EMIT.  ( char -- )                                                127 AND  DUP 32 < IF  DROP 46  THEN  EMIT ;                 : DLA  ( addr -- addr' )                                            7 FOR  2C@+ EMIT. EMIT.  NEXT ;                             : DU  ( addr -- addr' )                                             CR DUP H. SPACE  DUP DLN DROP SPACE  DLA ;                  : DUMP  ( addr len -- )                                             8 / 1 - FOR  DU  NEXT  DROP ;                                                                                                                                                                                                                                                                                                                                                               \ CASE                                                21Jun87AM ( Original by Dr. Charles E. Eaker, Forth Dimensions II/3 p37 ) ( Modified from Steve Lohr in "More on NC4000" Vol 3 p 51 )                                                                     : <OF>   OVER = DUP IF  SWAP-DROP EXIT  THEN ;                  COMPILER                                                        : CASE      0 ;                                                 : OF        COMPILE <OF>  [COMPILE] IF ;                        : ENDOF     [COMPILE] ELSE ;                                    : ENDCASE   COMPILE DROP                                                    BEGIN  ?DUP WHILE  [COMPILE] THEN  REPEAT ;         FORTH                                                                                                                                                                                                                                                                                                                           \ DEFER                                               06Jun87AM OCTAL                                                           : DEFER  ( -- )     CREATE 100040 , ;                           : IS   ( cfa -- )   ' ! ;                                                                                                       COMPILER                                                        : [']  ( -- cfa )   ' [COMPILE] LITERAL ;                       : IS   ( cfa -- )   [COMPILE] [']  [COMPILE] ! ;                FORTH                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \ ALU Instruction                                     06Jun87AM OCTAL                                                           : ALU.      ( instruction -- )                                              7 TIMES 2/ 7 AND CASE                                             1 OF ." AND"    ENDOF                                           2 OF ." SWAP -" ENDOF                                           3 OF ." OR"     ENDOF                                           4 OF ." +"      ENDOF                                           5 OF ." XOR"    ENDOF                                           6 OF ." -"      ENDOF                                         ENDCASE ;                                                                                                           : CARRY.    ( instruction -- )                                              200 AND IF ." c" THEN ;                                                                                                                                                             \ ALU Instruction                                     06Jun87AM OCTAL                                                           : -ALU.     ( instruction -- )                                              DUP 7000 AND DUP 2000 = SWAP 6000 = OR                          IF  4000 XOR  THEN  ALU. ;                                                                                          : ALU.ALU   ( instruction -- )                                              DUP DUP 120 AND CASE                                              000 OF  ." OVER "       -ALU.  ENDOF                            100 OF  ." SWAP OVER "   ALU.  ENDOF                            120 OF  ." 2DUP "        ALU.  ENDOF                          SWAP ALU. ENDCASE CARRY. SPACE ;                                                                                                                                                                                                                                                                                    \ ALU Instruction                                     06Jun87AM OCTAL                                                           : ALU.Y     ( instruction -- )                                              120 AND CASE                                                      000 OF  ." DROP DUP " ENDOF                                     020 OF  ." DROP "     ENDOF                                     100 OF  ." SWAP "     ENDOF                                     120 OF  ." OVER "     ENDOF                                   ENDCASE ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \ ALU Instruction                                     06Jun87AM OCTAL                                                           : ALU.T     ( instruction -- )                                              DUP 100000 = IF DROP ." NOP " ELSE                              120 AND CASE                                                      020 OF  ." NIP "      ENDOF                                     100 OF  ." NIP DUP "  ENDOF                                     120 OF  ." DUP "      ENDOF                                   ENDCASE THEN ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \ ALU Instruction                                     06Jun87AM OCTAL                                                           : SHIFT.    ( instruction -- )                                              DUP 10 AND IF ." D" THEN                                          3 AND CASE                                                      1 OF  ." 2/ "  ENDOF                                            2 OF  ." 2* "  ENDOF                                            3 OF  ." 0< "  ENDOF                                          ENDCASE ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \ ALU Instruction                                     06Jun87AM OCTAL                                                           : ALU.OTHER ( instruction -- )                                              DUP DUP 7000 AND CASE                                           0    OF  ALU.T  ENDOF                                           7000 OF  ALU.Y  ENDOF                                           SWAP ALU.ALU  ENDCASE SHIFT. ;                                                                                                                                                                                                                      : EXIT.     ( instruction -- )                                              40 AND IF ." EXIT" THEN ;                                                                                                                                                                                                                                                                                           \ ALU Instruction                                     06Jun87AM OCTAL                                                           : ALU.INS   ( instruction -- )                                              DUP 177737 AND CASE                                               102411 OF  ." *- "  ENDOF                                       102412 OF  ." *F "  ENDOF                                       102414 OF  ." /'' " ENDOF                                       102416 OF  ." /' "  ENDOF                                       102616 OF  ." S' "  ENDOF                                       104411 OF  ." *' "  ENDOF                                     OVER ALU.OTHER ENDCASE EXIT. ;                                                                                                                                                                                                                                                                                                                                                      \ Branch Instruction                                  06Jun87AM OCTAL                                                           : IF.INS    ( addr instruction -- addr )                                    ." 0BRANCH to " GET.ADR H. ;                        : ELSE.INS  ( addr instruction -- addr )                                    ." BRANCH to " GET.ADR DUP H.                                   PFA>NFA ?DUP IF ID. THEN  ;                         : LOOP.INS  ( addr instruction -- addr )                                    ." LOOP to " GET.ADR H. ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \ Short Literals                                      06Jun87AM OCTAL                                                           : LIT.      ( instruction -- )                                              37 AND . ;                                                                                                          : I@.       ( instruction -- )                                              37 AND CASE                                                        1 OF  ." I"   ENDOF                                             3 OF  ." -1"  ENDOF                                            21 OF  ." R>"  ENDOF                                          DUP . ." I@"  ENDCASE ;                                                                                                                                                                                                                                                                                                                                                             \ Literal Fetch Instruction                           06Jun87AM OCTAL                                                           : LIT@.OTHER  ( addr instruction -- addr' )                         DUP 177700 AND 147100 = IF  LIT. ." @" EXIT THEN                DUP 177700 AND 147300 = IF  I@. EXIT THEN                       DUP 170500 AND 140000 = IF  DUP LIT. ." @ " DUP -ALU.                                       CARRY. EXIT THEN                    DUP 170700 AND 140700 = IF  DUP I@. SPACE -ALU. EXIT THEN       DUP 170500 AND 140400 = IF  OVER ? DUP -ALU. CARRY. 1 +                                     EXIT THEN                           DROP ." ???" ;                                                                                                                                                                                                                                                                                                                                                                              \ Literal Fetch Instruction                           06Jun87AM OCTAL                                                           : LIT@.INS  ( addr instruction -- addr' )                                   CASE                                                              140000 OF  ." TWO"      ENDOF                                   140721 OF  ." R> DROP"  ENDOF                                   147500 OF  1 @+ SWAP .  ENDOF                                   SWAP OVER LIT@.OTHER  SWAP DUP SPACE EXIT.                    ENDCASE ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \ Literal Store Instruction                           06Jun87AM OCTAL                                                           : LIT!.OTHER  ( instruction -- )                                    DUP 177700 AND 150300 = IF  ." DUP " LIT. ." I!" EXIT THEN      DUP 177700 AND 157000 = IF  LIT. ." !" EXIT THEN                DUP 177700 AND 157200 = IF  LIT. ." I!" EXIT THEN               DUP 177700 AND 157500 = IF  LIT. EXIT THEN                      DUP 177700 AND 157700 = IF  LIT. ." I@!" EXIT THEN              DUP 170700 AND 150200 = IF  ." DUP " DUP LIT. ." I! " -ALU.                                 EXIT THEN                           DUP 170700 AND 150000 = IF  ." DUP " DUP LIT. ." ! " -ALU.                                  EXIT THEN                           DUP 170500 AND 150400 = IF  DUP LIT. DUP -ALU. CARRY.                                       EXIT THEN                           DROP ." ???" ;                                                                                                              \ Literal Store Instruction                           06Jun87AM OCTAL                                                           : LIT!.INS  ( instruction -- )                                              CASE                                                              150301 OF  ." DUP >R"     ENDOF                                 157201 OF  ." >R"         ENDOF                                 157221 OF  ." TIMES"      ENDOF                                 157701 OF  ." >R SWAP R>" ENDOF                                 DUP LIT!.OTHER  DUP SPACE EXIT.                               ENDCASE ;                                                                                                                                                                                                                                                                                                                                                                                                                                           \ Memory Fetch Instruction                            06Jun87AM OCTAL                                                           : MEM@.INS  ( instruction -- )                                      DUP 177737 AND 167100 = IF  ." @" ELSE                          DUP 177737 AND 160000 = IF  ." @DROP" ELSE                      DUP 170700 AND 160700 = IF  DUP LIT. ." @" DUP -ALU. ELSE       DUP 170577 AND 160000 = IF  ." @ " DUP -ALU. DUP CARRY. ELSE    ." ???" THEN THEN THEN THEN                                     SPACE EXIT. ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \ Memory Store Instruction                            06Jun87AM OCTAL                                                           : MEM!.INS  ( instruction -- )                                      DUP 177737 AND 177000 = IF  ." !"   ELSE                        DUP 177737 AND 177300 = IF  ." N!"  ELSE                        DUP 170700 AND 170700 = IF  DUP LIT. ." !" DUP -ALU.  ELSE      ." ???" THEN THEN THEN                                          SPACE EXIT. ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \ Display Machine Instructions                        06Jun87AM OCTAL                                                           : DIS.INS   ( addr instruction -- next-addr )                               DUP 12 TIMES 2/ 7 AND CASE                                        0 OF  ALU.INS   ENDOF                                           1 OF  IF.INS    ENDOF                                           2 OF  LOOP.INS  ENDOF                                           3 OF  ELSE.INS  ENDOF                                           4 OF  LIT@.INS  ENDOF                                           5 OF  LIT!.INS  ENDOF                                           6 OF  MEM@.INS  ENDOF                                           7 OF  MEM!.INS  ENDOF                                         ENDCASE ;                                                                                                                                                                                                                                           \ Display Calls                                       06Jun87AM HEX                                                             : STR.      ( addr -- addr' )                                               ASCII " EMIT  SPACE TYPE  ASCII " EMIT ;                                                                            : CALL.INS  ( addr instruction -- addr' )                                   CASE                                                              1269 OF  ASCII . EMIT  STR.  ENDOF                              125F OF  ." ABORT"     STR.  ENDOF                            DUP HEAD. ENDCASE ;                                                                                                                                                                                                                                                                                                                                                                                                                                 \ Display Instruction                                 06Jun87AM                                                                 : DIS.LINE  ( addr -- next-addr | 0 )                                       DUP ?LINK IF  DROP 0 ." End of word " EXIT  THEN                DUP H.  1 @+ SWAP  DUP O. SPACE                                 DUP 0< IF  DIS.INS  ELSE  CALL.INS  THEN  CR ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \ Decompiler                                          06Jun87AM : see       ( addr -- )                                                     ASCII P  CR                                                     BEGIN  CASE                                                       ASCII Q OF  DROP EXIT  ENDOF                                    ASCII P OF  15 FOR DIS.LINE DUP WHILE NEXT                                  ELSE R>DROP THEN ENDOF                              32      OF  DIS.LINE  ENDOF                                   ENDCASE  DUP WHILE  KEY  REPEAT DROP ;                                                                              : SEE       ' see ;                                             : SEE'      H' see ;                                                                                                                                                                                                                                                                                                            \ Debugger                                            06Jun87AM                                                                 VARIABLE IP0    \ First word in definition                      VARIABLE IP     \ Current breakpoint address                    VARIABLE CFA    \ Original Cfa of Word at IP                    0 CFA !                                                                                                                         : RESTART   ( -- )                                                          IP0 @ IP ! ;                                        : UNBUG     ( -- )                                                          CFA @ ?DUP IF  IP @ !  0 CFA !  THEN ;              : IP+       ( -- )                                                          1 IP +! ;                                                                                                                                                                                                                                           \ Advance IP for Machine Instructions                 23Jun87AM OCTAL                                                           : DO-ELSE   ( -- )   IP @ 170000 AND  IP @ @ 7777 AND +                     IP0 @ MAX  IP ! ;                                   : DO-IF     ( f -- f )                                                      DUP IF IP+ ELSE DO-ELSE THEN ;                      : DO-LOOP   ( -- )                                                          R> R> R>  I IF DO-ELSE ELSE IP+ THEN  >R >R >R ;    : EXIT?     ( -- f )                                                        IP @ @ 40 AND ;                                     : DO-ALU    ( -- )                                                          EXIT? IF RESTART ELSE IP+ THEN ;                    : DO-MEM    ( -- )                                                          EXIT? IF RESTART ELSE                                           IP @ @ DUP 170500 AND 140400 = SWAP 147500 = OR                 IF ( literal ) IP+ THEN  IP+  THEN ;                \ Advance IP for Call instructions                    06Jun87AM HEX                                                             : DO-STRING ( -- )                                                          IP @ 1 +  DUP 2* C@ 2 + 2/ +  IP ! ;                                                                                : DO-CALL   ( addr -- )                                                     CASE                                                              1269 OF  ( dot" )  DO-STRING  ENDOF                             125F OF  ( abort" )  RESTART  ENDOF                             ['] QUIT OF  RESTART  ENDOF                                   IP+ ENDCASE ;                                                                                                                                                                                                                                                                                                                                                                       \ Advance IP by Instruction Type                      06Jun87AM OCTAL                                                           : NEXT-BKPT ( -- )                                                          IP @ @  ( instruction )                                         DUP 100000 AND IF                                               12 TIMES 2/ 7 AND CASE                                            0 OF  DO-ALU   ENDOF                                            1 OF  DO-IF    ENDOF                                            2 OF  DO-LOOP  ENDOF                                            3 OF  DO-ELSE  ENDOF                                          DO-MEM ENDCASE                                                  ELSE  DO-CALL  THEN ;                                                                                                                                                                                                                                                                                               \ Display Breakpoint                                  23Jun87AM : .TRACE    ( -- : display trace info )                                     CR ." Stack:  " .S                                              CR IP @ DIS.LINE DROP ;                             \           ." -" ;                                                                                                                                                                             VARIABLE RES                                                    : INTERP    ( -- )                                                          0 RES !  BEGIN  MSG @ 64 EXPECT  0 0 INTERPRET                  RES @ UNTIL ;                                       : RESUME    ( -- )                                                          -1 RES ! ;                                                                                                                                                                                                                                          \ Breakpoint Routine                                  23Jun87AM DEFER PATCH                                                     : TRACE     ( -- )                                                          UNBUG  ( restore Cfa )                                          R> 1 - >R  ( backup IP )                                        .TRACE  KEY  CASE                                                 ASCII Q OF  ." Unbug" QUIT        ENDOF                         ASCII F OF  INTERP                ENDOF                         ASCII R OF  RESTART PATCH EXIT    ENDOF                         ASCII C OF  EXIT                  ENDOF                       ENDCASE  NEXT-BKPT PATCH  ;                                                                                         : (PATCH)   ( -- )                                                          IP @ @ CFA !   ['] TRACE IP @ ! ;                   ' (PATCH) IS PATCH                                                                                                              \ Debugger                                            06Junhis is a decompiler and debugger for the NC4000 processor.     It was written to be used with cmFORTH and might require        modificaion for other NC4000 Forth implementations.                                                                             Andrew McKewan                                                  P.O.Box 176                                                     Lakevillecreens 6 through 13 were copied from "More on NC4000" edited   by C.H.Ting, volume 3, pp 57-63.                                The code is by Clifford King of                                    Micro K Systems                                                 15874 East Hamilton Place                                       Aurora, CO  80013-1754                                          (303) 693-3413                                                                                                               H.  Display a number in hex.                                    O.  Display a number in octal.                                  B.  Display a number in binary.                                 HASH  ( n - adr ) Return address of vocabulary thread           .S  Display top 5 stack items                                                                                                                                                                                                                                   ID.  Display the name field of a word.  If the name has been       truncated, trailing underscore characters are displayed         to fill out the full length of the name.                                                                                     WORDS  Display the names of all the words in the current           vocabularyomment to end of line.  Skips the interpreter the the          beginning of the next line.  A version is needed for the        compiler and another to be used while interpreting.                                                                          ?TERM  Look at the status of the X4 serial input bit.  If the          state is low leave a true flag else a false flag.                                                                        NIP   Redefine SWAP-DROP for us F83 fansdefines literal input words which use the base that is      given when the word is defined.  This allows a hex number       to be input with H' even when the base is currently decimal     or any other base.                                           ASCII  allows entry of a single ascii character as a literal       value.  Usage: ASCII X .  The binary value of X is left on      the stack.  May be used to compile an ascii character into      a word definitionconvert name field address to parameter field address. LFA>NFA  convert link field address to name field address.      NFA>LFA  convert name field address to link field address.      LFA>PFA  convert link field address to parameter field address.    If the "remote" bit is set in the header, then it is the        separated head of a word.  Must fetch the PFA which is the      pointer to the actual body of the word.                                                                                      SEARCH  find a word's header given the PFA.  Search the            vocabulary for a header wit a PFA that matches.                                                                                                                                                                                                                                                                                                                                                                                                              PFA>NFA  Look through the vocabulary threads to find a PFA         that matches the original PFA.  Search COMPILER then FORTH.     If no match is found return 0 indicating a failure.                                                                          GET.NEXT  get instruction at current instruction pointer and       increment instruction pointer to next addressconvert the PFA to and NFA and display the name.  If       no match is found display message.                                                                                            GET.ADR  get the 12-bit address imbedded in an instruction.        Use current relocation constant to return the addressused address addr and an address (thread) pointing to        the beginning of a vocabulary thread to find a match between    an address of an LFA in the thread with the initial address     addr.  If addr matches one of the LFA's in the thread leave     the original address, otherwise leave a false flag.                                                                          ?LINK  uses address addr to find a match in the two vocabulary     threads iwth the address.  If a match is found leave a true      flag, othersise leave a false flag.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         DLN    Dump 8 cells at addr in hex.  Leave addr+8.              EMIT.  Display ascii character.  Unprintable characters are            displayed as a period.                                   DLA    Dump 8 cells as ascii characters.  Leave addr+8          DU     Dump 8 cells at addr in hex and ascii.  Leave addr+8            so repeated calls to DU can be used.                     DUMP   Dump len cells at addrompare top two stack items.  If they are equal, leave          a true flag, otherwise leave the second item and a false        flag.                                                     CASE  Begin a case structure.  Case item is on the stack.       OF    If item on stack matches case item, drop case item and          execute code up to endof.                                 ENDOF  End of OF clause.                                        ENDCASE  End of case statement.  Resolve all ENDOF branches           to come here.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             DEFER  Create a word whose behavior can be changed.  100040 is         the opcode for exit.                                     IS     Patch the following word with a new cfa.                                                                                 [']    Compile a cfa as a literal.                              IS     Compile code to patch a defered word at runtimeisplay the ALU field (bits 9-11) of an instruction.            ALU codes 0 and 7 are not displayed.  They will most            likely correspond to stack manipulation instructions and        depend on the rest of the instruction.                      CARRY.                                                              Display the carry bit of an instruction.  Bit 7 is              the carry bit for ALU instructions and some memory and          literal instructionsisplay the reverse of an ALU instruction.  Since all           operations except - commute, the effect is to exchange          - and SWAP- .                                                                                                               ALU.ALU                                                             Display an ALU instruction with an ALU code of 1-6.             There are 4 combinations of the SA (stack active) and TN        (copy T to N) bits.  Not all these combninations will           be optimized by cmFORTH.                                                                                                                                                                                                                                                                                                                                                                                                                                    ALU.Y                                                               Display an ALU instruction with an ALU code of 7 (pass Y).      Again the different instructions are decided on by the          SA and TN bitsisplay an ALU instruction with an ALU code of 0 (pass T).      The NOP instruction is only displayed if there are no           shifts or exit to avoid displaying "NOP 2/" etcisplay the shift bits of an ALU instruction.  "D" and          "D0<" represent illegal bit patterns but will be displayed      by this wordisplay an ALU instruction that is not one ot the special       multiply or divide instructions.  We examine the ALU            code and decide if it is 0 or 7 which get special treatment.    Then display the shift bits.                                                                                                EXIT.                                                               Display the return bit of an instructionisplay an ALU instruction.  We first check for the             multiply and divide instructions that must be handled as        special cases.  Regular ALU instructions are passed off         to ALU.OTHER.  All ALU instructions may have the return         bit set so we display that alsoisplay a conditional branch instruction.  Fetch destination    address from instruction.  This instrucion is comipiled by      IF, WHILE and UNTIL.                                                                                                        ELSE.INS                                                            Display an unnditional branch instruction.                      This instruction is compiled by ELSE, REPEAT and AGAIN.                                                                     LOOP.INS                                                            Display a loop instruction.  This instruction is compiles       by NEXT.                                                                                                                                                                                                                                                                                                                    LIT.                                                                Display a short literal imbedded in an instruction.                                                                         I@.                                                                 Display an fetch from internal register instruction.            Register 1 is I, register 3 always returns -1.  Register        21 (octal) is the times register, but when you fetch            from it it does the R> operation.  Other registers are          displayed as "nnisplay the general literal fetch instructions.                 The literal and memory instructions do not have a               regular form like the ALU and branch instructions and           are just decompiled a case at a time.                           The instructions are:                                               nn @                                                            nn I@                                                           nn @a   (only @+ and @- make sense)                             nn I@ a                                                         n a                                                                                                                     nn=short literal (0-31)  n=full literal  a=alu operation                                                                                                                                                                                                        LIT@.INS                                                            Display a literal fetch instruction.                            Handle the special cases.                                       "TWO" = "0 @DROP" a two cycle nop.                              147500 is the literal fetch instructionisplay the general literal store instructions:                     DUP nn I!                                                       nn !                                                            nn I!                                                           nn                                                              nn I@!                                                          DUP nn I! a                                                     DUP nn ! a                                                      nn aisplay the literal store instructions.  The return             stack instructions are handled as special casesisplay the memory fetch instructions:                              @                                                               @DROP                                                           nn @ a                                                          @ aisplay the memory store instructions:                              !                                                               N!  ( OVER SWAP ! )                                             nn ! aisplay a machine instruction.  The type of instruction         is in bits 12-14 of the opcodeisplay a packed string with quotes.  Leave the address         of the cell following the string.  These are cell addresses     not byte addresses.                                                                                                         CALL.INS                                                            Display a call instruction.  Handle the special case            ." and ABORT" .  The address given are for cmFORTH eproms       dated 7/18/87.  Other calls have there name fields              displayedisplay the instruction at addr and advance it to the           next instruction.  If this is the last instruction              in a definition, return 0.  The address is displayed in         hex, the instruction in octal and as Forth source.              Bit 15 is checked to see if it is a call or a machine           instructionsee                                                                 Decompile a word that starts at addr.  Display up to            15 instructions and wait for the user.  They can display        one more instruction with the space bar, 15 more by pressing    P, and quit the decompiler by pressing Q.                                                                                   SEE                                                                 Decompile the next word in the input stream.                    e.g.  SEE MYWORD                                                                                                            SEE'                                                                Decompile the word at the given hex address.  Useful for        decompiling headerless words.                                   e.g.  SEE' 125F                                                                                                                                                                             IP0                                                                 The address of the first instruction in the definition          being debugged.                                             IP                                                                  The address of the current breakpoint.                      CFA                                                                 The instruction that used to be at the breakpoint.          RESTART                                                             Set IP back to the beginning of the definition.             UNBUG                                                               Remove the breakpoint if any.                               IP+                                                                 Advance IP by one.                                                                                                          IP and CFA are historical terms once used by Forth programmers!                                                                 DO-ELSE  Move IP to the destination of a branch.                         Don't move further back than IP0.                      DO-IF    Check top of stack and move IP to the destination if            the branch will be taken, otherwise advance one.       DO-LOOP  Determine if loop will branch or not and set IP                 accordingly.  R> R> R> removes the nesting levels               taken to get here from the original definition.        EXIT?    Leave true flag if the next instruction has the                 return bit set.                                        DO-ALU   ALU instructions are always one cell.  Set IP back to           the beginning of the definition if the return bit is            set.                                                   DO-MEM   Make special check for full literal fetch instructions          that occupy two cells.  Also check for exit.                                                                                                                                           DO-STRING                                                           Move IP to the end of a string literal.                                                                                     DO-CALL                                                             Move IP to the next instruction.  Skip the inline string        for ." .  Treat ABORT" and QUIT as exit words and reset         the IP to the beginning of the definition.  Any new control     structures such as CASE and DO .. LOOP as well as any words     that take inline literal must be added along with routines      to determine where to set the next breakpoint.                                                                                                                                                                                                                                                                                                                                                                                                              NEXT-BKPT                                                           Move IP to the next address to set the breakpoint.  This        will usually be the next instruction but may not be for         branching instructions or instructions that use inline          literalsisplay breakpoint information.  The stack is shown             and the next instruction to be executed is decompiled.          The user is prompted to input a command.  This routine          may be expanded to display critical variables etc.                                                                          RES                                                                 Flag to resume debugger.                                    INTERP                                                              A mini text interpreter.  Get input from the user and           interpret it until they type RESUME.  You can look at           variables, alter the stack etc.                             RESUME                                                              Set the resume flag.                                                                                                                                                                        PATCH                                                               Patch in the address of the breakpoint routine at the           address in IP.  Save the original instruction in CFA.       TRACE                                                               The breakpoint routine.  Restore CFA and back up the            address on the return stack so we will execute that             instruction when we exit.  Display trace information and        process a one key command.  Then patch in the next              breakpoint so we will execute a single instruction.                                                                         (PATCH)                                                             Now we know the address of TRACE we can define PATCH.                                                                                                                                                                                                                                                                       DEBUG                                                               Debug the next word in the input stream.                        e.g.  DEBUG MYWORD                                              When MYWORD executes it will be stepped one instruction         at a time