EXIT    -* DECIMAL EXPONENT FLOATING POINT *-                                                                                   Adapted for the NOVIX 4000, cmFORTH System from the             code published in FORTH TOOLS AND APPLICATION, by               GARY FEIERBACH and PAUL THOMAS.                                                                                                 NOTES:                                                                The following code is intended as a starting point,       a lot of reworking, debuging and optimizing, is needed.               Dr D. Miller provided the hardware and his knowlege of     the chip, to make this proJect posible.                              (note:for commercial application use of a developed       debugged optimized floating point such as as Greg Bailey's      code in Polyforth from Forth Inc. is suggested. opinion-dlm)                                                                      this file placed in public domain by Alberto Pasquale 2/15/88 ( LOADING SCREEN )                                              DECIMAL 8 WIDTH !                                                                                                               COMPILER : \ 64 >IN @ OVER MOD - >IN +! ;                       FORTH    : \ [COMPILE] \ ;                                                                                                                                                                      : load> ( n -- ) CR                                               BEGIN ?DUP ?DUP ?DUP WHILE                                      CR U. LOAD 1 + REPEAT  ;                                                                                                      : LOAD> ( -- ) BLK @ 1 + load> ;                                                                                                : END ( n -- -1 )  DROP -1  ;                                                                                                   LOAD>                                                            OCTAL \ COMPILER uCODES                                        COMPILER                                                                                                                        : @+  164700 SHORT ;  : @- 162700 SHORT ;                       : !+  174700 SHORT ;  : !- 172700 SHORT ;                       104411 uCODE *'      102411 uCODE *-                            100012 uCODE D2*     100011 uCODE D2/ 104011 uCODE +D2/         102416 uCODE /'      102414 uCODE /''                           102412 uCODE *F      102616 uCODE S'                            104220 uCODE +c      154600 uCODE 0+c                           : I@! 157700 SHORT ;                                            157504 uCODE MD  ( MULTIPLIER/DIVISOR REGISTER)                 157506 uCODE SR  ( SQUARE-ROOT REGISTER)                                                                                        FORTH                                                                                                                           DECIMAL \ 4PICK 3TUCK                                                                                                                                                                           : 4PICK ( n1 n2 n3 n4 -- n1 n2 n3 n4 n1 )                         >R >R >R DUP SR I! R> R> R> SR I@ ;                                                                                                                                                           : 3TUCK ( n1 n2 n3 n4 -- n4 n1 n2 n3 )                            SR I! >R >R >R SR I@ R> R> R> ;                                                                                               EXIT                                                                   This is not very elegant but will do wat I needhuck Moore U* fix                                                                                                                                                                      : +U* ( +N +N -- D ) DUP 1 AND IF 1 - MD I! DUP ELSE               BEGIN [ SWAP ] MD I! 0 THEN 16 TIMES *' ;                                                                                    : U* ( u u -- ud ) DUP 100001 AND UNTIL OVER SR I! DUP MD I!      DUP 0< IF 0 SR I@ +D2/ ELSE 0 0 THEN                            MD I@ 1 AND IF SWAP SR I@ + SWAP 0+c THEN                       SR I! >R 77776 AND MD I! 0 16 TIMES *'                          SWAP R> + SWAP SR I@ +c ;                                                                                                                                                                                                                                                                                                                                                                     \ DOUBLE NUMBERS                 <ap 1/88>                                                                                      : * ( n1 n2 -- n3 ) U* DROP ;                                                                                                   : */MOD ( u1 u2 u3 -- r q ) >R U* R> M/MOD SWAP ;                                                                               : DMINUS ( d -- d )                                               2DUP OR IF -1 SWAP- SWAP NEGATE SWAP THEN ;                                                                                   : DABS ( d -- d ) DUP 0< IF DMINUS THEN ;                                                                                       : M* ( n1 n2 -- d )                                               2DUP XOR 0< >R ABS SWAP ABS +U* R> IF DMINUS THEN ;                                                                                                                                                                                                           \ DOUBLE NUMBERS                 <ap 1/88>                                                                                      : */ ( n1 n2 u -- n3 ) >R M* R> M/ ;                                                                                            : MD* ( d1 n -- d2 ) OVER OVER XOR 0< >R ABS >R DABS              I * SWAP R> U* ROT + R> IF DMINUS THEN  ;                                                                                                                                                     : MD/MOD ( ud1 u2 -- u3 udap 1/88>                                                                                      : -ROT ( n1 n2 n3 -- n3 n1 n2 )  SWAP >R SWAP R> ;                                                                              : 2SWAP ( d1 d2 -- d2 d1 ) ROT >R ROT R> ;                                                                                      : 2OVER ( d1 d2 -- d1 d2 d1 ) >R >R 2DUP R> -ROT R> -ROT ;                                                                      : 2ROT ( d1 d2 d3 -- d2 d3 d1 )                                   >R >R >R -ROT R> -ROT R> -ROT R> -ROT ;                                                                                       : 2DROP ( d -- ) DROP DROP ;                                                                                                    : 2CONSTANT ( d  -- )                                             CREATE -1 ALLOT SWAP                                            [COMPILE] LITERAL [COMPILE] LITERAL  [COMPILE] EXIT ;         \ DOUBLE NUMBERS                 <ap 1/88>                                                                                                                                                      : D+ ( d1 d2 -- d3) >R SWAP >R + R> R> +c ;                                                                                     : D- ( d1 d2 -- d3) DMINUS D+ ;                                                                                                 : DU< ( ud1 ud2 -- flag )                                         ROT 2DUP XOR                                                    IF SWAP U< SWAP-DROP SWAP-DROP EXIT THEN                        2DROP U< ;                                                                                                                                                                                                                                                                                                                                                                                    \ DOUBLE NUMBERS                 <ap 1/88>                                                                                                                                                      : DC+ (  d1 d2 -- d3 1|0 , 1 if both are <0 )                     >R OVER I SWAP >R D+ R> R> 0< SWAP 0< AND 1 AND ;                                                                             : MQ* ( d1 d2 -- q )                                              >R SWAP I OVER >R  U*                                           2SWAP OVER >R DUP >R U*                                         0 R> R> R> SWAP R>                                              U* 2SWAP U* DC+ >R                                              DC+ R> + >R >R 2SWAP                                            R> R> D+ ;                                                                                                                                                                                                                                                    \ DOUBLE NUMBERS                 <ap 1/88>                                                                                                                                                      : QSHLC ( q -- q*2 carry )                                        >R >R DUP 0< >R D2* SWAP -2 AND SWAP                            R> 1 AND R> I                                                   D2* >R -2 AND  + R> 0+c R> 0< ;                                                                                               : DSHL ( d -- d*2 )                                               D2* SWAP -2 AND SWAP ;                                                                                                        : DSHLC ( d -- d*2 carry )                                        DUP 0< >R DSHL R> ;                                                                                                                                                                                                                                           \ DOUBLE NUMBERS                 <ap 1/88>                                                                                      : DIVISOR@ ( -- d ) SR I@ MD I@ ;                               : DIVISOR! ( d -- stored in MD SR ) MD I! SR I! ;                                                                               : DIV-STEP (  q --  q )                                           QSHLC                                                           IF BEGIN [ SWAP ]                                                  DIVISOR@ D- >R >R 1 0 D+  R>  R>  EXIT                       THEN 2DUP DIVISOR@   DU< UNTIL ;                                                                                                                                                                                                                                                                                                                                                                                                                              \ DOUBLE NUMBERS                 <ap 1/88>                                                                                                                                                      : MQ/MOD  ( q d -- dquot drem )                                   DIVISOR! 31 FOR DIV-STEP NEXT  ;                                                                                              : MQ/ ( q -- d ) MQ/MOD 2DROP ;                                                                                                 : D* ( d1 d2 -- d3 ) MQ* 2DROP ;                                                                                                : D/MOD ( ud1 ud2 -- udrem udquot )                               >R >R 0 0 R> R> MQ/MOD 2SWAP ;                                                                                                                                                                                                                                                                                                \ DOUBLE NUMBERS                 <ap 1/88>                                                                                                                                                      : D/ ( d1 d2 -- d3 )                                              >R OVER I XOR R> SWAP 0< >R DABS >R >R DABS 0 0 R> R>           MQ/ R> IF DMINUS THEN ;                                                                                                                                                                                                                                                                                                       : D*/ ( d1 d2 d3 -- d4=d1*d2/d3 )                                 >R >R MQ* R> R> MQ/ ;                                                                                                                                                                                                                                                                                                         \ FORTH TOOLS FLOATING POINT            <ap 1/88>                                                                                                                                                                                                               : FCONSTANT ( d n -- )                                            CREATE -1 ALLOT -ROT SWAP [COMPILE] LITERAL                     [COMPILE] LITERAL [COMPILE] LITERAL [COMPILE] EXIT ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \ FORTH TOOLS FLOATING POINT            <ap 1/88>                                                                               : FDROP ( d n -- ) DROP 2DROP ;                                                                                                 : FSWAP ( d1 n1 d2 n2 -- d2 n2 d1 n1 )                            >R >R 3TUCK R> 3TUCK R> 3TUCK ;                                                                                               : FDUP ( d n -- d n d n )                                         DUP >R OVER >R >R OVER R> SWAP R> R> ;                                                                                        : FOVER ( d1 n1 d2 n2 -- d1 n1 d2 n2 d1 n1 )                      >R >R >R FDUP R> 3TUCK R> 3TUCK R> 3TUCK ;                                                                                                                                                                                                                                                                                    \ FORTH TOOLS FLOATING POINT            <ap 1/88>               VARIABLE LEXP ( for 0 representation )                                                                                          : FVAR ( -- addr )  CREATE 0 , -1 , -1 , DOES R> ;                                                                              : F@ ( addr -- dmant exp ) 2 + 2 TIMES 1 @- DROP ;                                                                              : F! ( dmant exp addr -- ) 2 TIMES 1 !+ DROP ;                                                                                  : FNEGATE ( fval -- -fval)  >R DMINUS R> ;                                                                                      : FABS ( fval -- fval') >R DABS R> ;                                                                                            : F0< ( fval -- flag )  DROP SWAP-DROP 0<  ;                                                                                    : F0= ( fval -- flag )  DROP OR 0= ;                            \ FORTH TOOLS FLOATING POINT            <ap 1/88>               HEX                                                                                                                             : ?NOTNEAR ( n -- n 1/0 1 if n has high bits all 0 or 1 )         DUP FC00 AND DUP FC00 = SWAP 0= OR ;                                                                                          DECIMAL                                                                                                                                                                                         : SM/10 ( d -- d/10 )                                             DUP 0< >R DABS                                                  10 MD/MOD ROT DROP R> IF DMINUS THEN  ;                                                                                                                                                                                                                                                                                       \ FORTH TOOLS FLOATING POINT            <ap 1/88>                                                                               : FNL ( f -- f normalized left )                                  FDUP F0= IF DROP LEXP @ EXIT THEN                               >R ?NOTNEAR                                                     IF BEGIN                                                           ?NOTNEAR WHILE                                                   R> 1 - >R 10 MD*                                                REPEAT                                                      ELSE 2DUP SM/10 ?NOTNEAR NOT                                    IF 2SWAP R> 1 + >R THEN 2DROP                                   THEN R> ;                                                                                                                                                                                                                                                                                                                     \ FORTH TOOLS FLOATING POINT            <ap 1/88>                                                                                39321 6553 2CONSTANT 2**32/10                                                                                                  : Q/10 ( q -- q/10 )                                              10 MD/MOD ROT >R 2**32/10 I MD*                                 R> 6 * 9 + 10 / 0                                               D+ >R >R 2SWAP 10 MD/MOD ROT DROP                               R> R> D+ 2SWAP ;                                                                                                              : D*100000000 ( d -- q )                                          2DUP >R >R 1525 U* ROT 57600 U*                                 0 R> 1525 U* R> 57600 U*                                        DC+ >R DC+ R> + >R >R 2SWAP R> R> D+ ;                                                                                                                                                        \ FORTH TOOLS FLOATING POINT            <ap 1/88>                                                                               : FSIGN ( f -- fabs flag T=neg F=pos )                            OVER 0<  >R FABS R> ;                                                                                                         : FNR ( f -- f normalize wright )                                 DUP 0<                                                          IF FSIGN >R >R                                                     BEGIN 2DUP 10 MD/MOD ROT 0= I 0= NOT AND                        WHILE ROT DROP ROT DROP R> 1 + >R                               REPEAT 2DROP R> R> IF FNEGATE THEN                           THEN ;                                                                                                                                                                                                                                                                                                                        \ FORTH TOOLS FLOATING POINT            <ap 1/88>                                                                               : FEN ( f1 n -- f2 lower exp by n )                               SWAP OVER + >R  1 - FOR SM/10 NEXT R> ;                                                                                       : F+ ( f1 f2 -- f3 )                                              4PICK OVER MIN LEXP ! ( for posible zero )                      FNL DUP >R FSWAP FNL R> OVER - ?DUP                             IF DUP 0< IF >R FSWAP R> ABS THEN FEN THEN                      >R ROT DROP D+ R> FNR ;                                                                                                       : F- ( f1 f2 -- f3 ) FNEGATE F+ ;                                                                                                                                                                                                                                                                                               \ FORTH TOOLS FLOATING POINT            <ap 1/88>                                                                               : F< ( f1 f2 -- flag ) F- F0< ;                                                                                                 : F= ( f1 f2 -- flag ) F- F0= ;                                                                                                 : F> ( f1 f2 -- flag ) FSWAP F< ;                                                                                               : F<> ( f1 f2 -- flag ) F= NOT ;                                                                                                : F<= ( f1 f2 -- flag ) F> NOT ;                                                                                                : F>= ( f1 f2 -- flag ) F< NOT ;                                                                                                                                                                                                                                \ FORTH TOOLS FLOATING POINT            <ap 1/88>                                                                               : FSXOR ( f1 f2 -- +-f1 +-f2 xoredsign  )                         >R >R >R OVER 0< >R FABS R> R> R> DUP 0< >R                     DABS ROT R> XOR  R> SWAP ;                                                                                                    : F* ( f1 f2 -- )                                                 FSXOR >R >R ROT >R MQ* 0 >R                                     BEGIN 2DUP OR 4PICK 0< OR WHILE                                 R> 1 + >R Q/10  REPEAT                                          2DROP R> R> R> + + R> IF FNEGATE THEN FNL FNR ;                                                                                                                                                                                                                                                                                                                                               \ FORTH TOOLS FLOATING POINT            <ap 1/88>                                                                                                                                               : F/ ( f1 f2 -- f3 )                                              >R 2DUP OR 0= R> SWAP IF FDROP EXIT THEN                        FSXOR >R >R >R >R                                               FNL >R D*100000000 R> 8 -                                       R> R> R> FNL >R ROT R> - >R                                     MQ/ R> R> IF FNEGATE THEN FNL FNR    ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \ NUMERIC  INPUT OUTPUT WORDS            <ap 1/88>              HEX                                                                                                                             4020 CONSTANT BL                                                                                                                : -WORD ( -- addrap 1/88>                                                                              VARIABLE DPL                                                                                                                                                                                                                                                                                                                    : 10*D+ ( ud1 c -- ud2 )                                          DUP ASCII . = IF 0 DPL ! DROP EXIT ELSE -1 DPL +! THEN          -DIGIT 0 2SWAP BASE @ MD* D+ ;                                                                                                                                                                                                                                                                                                                                                                                                                                \ NUMERIC  INPUT OUTPUT WORDS            <ap 1/88>                                                                              : DNUMBER ( a -- d )                                              0 DPL !                                                         2C@+ OVER ASCII - = DUP >R                                      IF SWAP-DROP 0 ELSE SWAP -DIGIT THEN 0                          ROT 1 - DUP DPL ! ?DUP IF 1 - 2/                                FOR                                                               ROT 2C@+ SWAP >R >R -ROT                                        R> 10*D+ R> DUP  32 XOR IF 10*D+ ELSE DROP THEN               NEXT THEN                                                       ROT DROP R> IF DMINUS THEN ;                                                                                                                                                                                                                                                                                                  \ NUMERIC  INPUT OUTPUT WORDS            <ap 1/88>                                                                              : D# ( -- d ) -WORD DNUMBER ;                                   : F# ( -- float )  -WORD DNUMBER DPL @ ;                        COMPILER                                                        : D# D# SWAP [COMPILE] LITERAL [COMPILE] LITERAL ;              : F# F# ROT [COMPILE] LITERAL SWAP [COMPILE] LITERAL                    [COMPILE] LITERAL ;                                      FORTH EXIT                                                     Use in the form  F# nnnn.nnnnnn , a leading 0 is needed for     numbers 0 < N < 1 ie 0.nnnn                                     Floats can olso be enter by D# nnnnn e, where e is a normal     signed integer, and will become the EXPONENT                    ie:                                                             F# 1.234 will leave on the stack 1234 0 -3 , and so will        D# 1234 -3                                                      \ NUMERIC  INPUT OUTPUT WORDS            <ap 1/88>                                                                              : fHOLD ( ..# d n -- ..# )                                        SWAP >R SWAP >R SWAP 1 + R> R> ;                                                                                              : <#f  ( d -- ...# d ) -1 -ROT ;                                                                                                : fSIGN ( ..# d n -- ..# d )                                      0< IF ASCII - HOLD  THEN ;                                                                                                    : #f ( ..# -- ..# d ) BASE @ MD/MOD ROT DIGIT fHOLD ;                                                                           : f#> ( ..# -- )                                                  DUP 0< 0=                                                       IF FOR EMIT NEXT ELSE DROP THEN ;                                                                                             \ NUMERIC  INPUT OUTPUT WORDS            <ap 1/88>                                                                              : fraction ( ...# d )                                             <#f  DPL @ DUP 0<                                               IF ABS 1 - FOR #f NEXT ASCII . fHOLD ELSE DROP THEN ;                                                                         : integer ( ..# d )                                               <#f   DPL @  1 - DUP 0< 0=                                      IF FOR ASCII 0 fHOLD NEXT ELSE DROP THEN                        BEGIN #f 2DUP OR 0= UNTIL  ;                                                                                                                                                                                                                                                                                                                                                                                                                                  \ NUMERIC  INPUT OUTPUT WORDS            <ap 1/88>                                                                              : F.R ( float n -- )                                              >R OVER >R DPL !  DABS                                          fraction integer R> fSIGN 2DROP R> OVER - SPACES f#> f#> ;                                                                    : F. ( float -- ) 0 F.R ;                                                                                                       : E.R ( float n -- ) >R -ROT 0 R> F.R ." E" . ;                 : E. ( float -- ) 0 E.R ;                                                                                                       : D. ( d -- )  0 F. ;                                           : D.R ( d n -- ) 0 SWAP F.R ;                                                                                                                                                                                                                                   \ NUMERIC  INPUT OUTPUT WORDS            <ap 1/88>                                                                              : S>D ( n -- d ) DUP 0< ;     \ single to doble                 : S>F ( n -- f ) S>D 0 ;      \ single to float                 : D>F ( d -- f ) 0 ;          \ doble to float                                                                                  EXIT                                                                                                                            The floating point numbers are represented by a                 32 bit integer ( mantisa ) and a 16 bit decimal exponent on     top as follows:-                                                                                                                float = d n = d * 10**n                                                                                                                                                                                                                                         \ NUMERIC  INPUT OUTPUT WORDS            <ap 1/88>                                                                              : F>D ( float -- d )                                              ?DUP IF                                                              DUP ABS SWAP 0<                                                 IF 1 - FOR                                                             10 MD/MOD ROT 4 > 1 AND 0 D+                                    NEXT                                                     ELSE 1 - FOR 10 MD* NEXT                                        THEN                                                       THEN ;                                                                                                                        : F>S ( float -- n ) F>D DROP ;                                                                                                                                                                                                                                 \ EXTENDED FLOATING POINT FUNCTIONS           <ap 1/88>         EXIT                                                                                                                            TRIGONOMETRIC FUNCTIONS                                                                                                         sin(x) cos(x) tan(x) for -1.5708 < x < 1.5708 radiansap 1/88>                                                                                  : F/1+  ( f1 f2 -- f3 , f3 = f1/f2 + 1 ) F/ F# 1.0 F+ ;                                                                         : FSIN ( fradians -- fsin )                                       FDUP FDUP F* FDUP FDUP FDUP FDUP FDUP                           F# -156.0 F/1+                                                  F* F# -110.0 F/1+  F* F# -72.0 F/1+                             F* F#  -42.0 F/1+  F* F# -20.0 F/1+                             F* F#   -6.0 F/1+  F* ;                                                                                                                                                                                                                                                                                                                                                                                                                                       \  FCOS FTAN                      <ap 1/88>                                                                                     : FCOS ( frad -- fcos )                                           F# 1.5708 FSWAP F- FSIN ;                                                                                                     : FTAN ( frad -- ftan )                                           FDUP FSIN FSWAP FCOS ?DUP                                       IF F/ ELSE 2DROP THEN ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \ SQUARE ROOT                       <ap 1/88>                                                                                                                                                   : SQRT ( ud -- u )                                                32768 SR I! 0 MD I! DSHL                                        14 TIMES S' DROP ;                                                                                                            : FSQRT ( float -- float )                                        FNL DUP ABS 1 AND                                                    IF >R 10 MD/MOD ROT 4 > 1 AND 0 D+ R> 1 + THEN                  >R SQRT 0 R> 2/ ;                                                                                                                                                                                                                                         END                                                                                                                            